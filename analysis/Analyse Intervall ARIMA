import yfinance as yf
import pandas as pd
from sklearn import metrics
import numpy as np
import matplotlib.pyplot as plt
from pmdarima import auto_arima
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler


assets = ["AAPL", "AMZN", "GOOGL", "MSFT", "TSLA", "JPM", "JNJ", "BAC", "WMT", "PG", "MA", "NVDA", "HD", "PYPL", "DIS", "INTC", "VZ", 
          "CMCSA", "CVX", "MRK"]
intervalls=  ["1mo", "3mo", "6mo", "1y", "2y"]
means= []
results = pd.DataFrame(index=assets,columns=intervalls)

#Durchführen ARIMA für jede Aktie und jedes Intervall
for element in assets:
    for time in intervalls:
            msft = yf.Ticker(element)
            df = msft.history(period=time)
            df = df.reset_index()
            df = df[['Date', 'Close']]
            df['Date'] = pd.to_datetime(df['Date'])
            train = df.iloc[:-10, 1]
            test = df.iloc[-10:, 1]
            model = auto_arima(train, trace=True, error_action='ignore', suppress_warnings=True)
            model.fit(train)
            p, d, q = model.order
            test_forecast = model.predict(n_periods=10)
            test_forecast = pd.DataFrame(test_forecast, index=test.index, columns=['Predictions'])
            mse = mean_squared_error( test, test_forecast["Predictions"])
            results.at[element, time] = mse
            

#Normalisierung der MSE
print(results)
results = results.transpose()
for element in results:
    scaler = MinMaxScaler()
    results[element] = scaler.fit_transform(results[[element]])


#Berechnung der durschnittlichen MSE für jedes Intervall
results = results.transpose()
for element in results:
    means.append(results[element].mean())


ywerte = means
xwerte = intervalls
plt.bar(xwerte, ywerte)
plt.xlabel("Zeitintervalle")
plt.ylabel("⌀ Normalisierter MSE über alle Aktien")
plt.show()


            
